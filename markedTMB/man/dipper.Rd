% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marked-package.R
\docType{data}
\name{dipper}
\alias{dipper}
\title{Dipper capture-recapture data}
\format{A data frame with 294 observations on the following 2 variables.
\describe{ \item{ch}{a character vector containing the encounter history of
each bird} \item{sex}{the sex of the bird: a factor with levels
\code{Female} \code{Male}} }}
\source{
Lebreton, J.-D., K. P. Burnham, J. Clobert, and D. R. Anderson.
1992. Modeling survival and testing biological hypotheses using marked
animals: case studies and recent advances. Ecol. Monogr. 62:67-118.
}
\description{
A capture-recapture data set on European dippers from France that
accompanies MARK as an example analysis using the CJS and POPAN models.  The
dipper data set was orginally described as an example by Lebreton et al
(1992).
}
\details{
There isn't a specific CJS model in markedTMB but you can use the model MSCJS with
a dummy state that is never observed.  This example shows how that can be done to 
fit standard JS models.


Note that the covariate "sex" defined in dipper has values "Male" and
"Female".  It cannot be used directly in a formula for MARK without using it
do define groups because MARK.EXE will be unable to read in a covariate with
non-numeric values.  By using \code{groups="sex"} in the call the
\code{\link{process.data}} a factor "sex" field is created that can be used
in the formula.  Alternatively, a new covariate could be defined in the data
with say values 0 for Female and 1 for Male and this could be used without
defining groups because it is numeric.  This can be done easily by
translating the values of the coded variables to a numeric variable.  Factor
variables are numbered 1..k for k levels in alphabetic order.  Since Female
< Male in alphabetic order then it is level 1 and Male is level 2.  So the
following will create a numeric sex covariate.

\preformatted{ dipper$numeric.sex=as.numeric(dipper$sex)-1 }
}
\examples{
\donttest{
data(dipper)
ms1=process.data(dipper,model="MSCJS",strata.labels=c("1","2"))
ms1.ddl=make.design.data(ms1)
ms1.ddl$Psi$fix[ms1.ddl$Psi$stratum!=ms1.ddl$Psi$tostratum]=0
ms1.ddl$p$fix=NA
ms1.ddl$p$fix[ms1.ddl$p$stratum==2]=0
mod_cjs=crm(ms1,ms1.ddl,model.parameters=list(S=list(formula=~1),
                                               p=list(formula=~time)),hessian=TRUE)
hmm_mat=compute_matrices(mod_cjs,state.names=c("Alive","NULL","Dead"))
}                                                
}
\keyword{datasets}
